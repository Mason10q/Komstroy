package com.example.core_android.utilsimport android.Manifestimport android.content.ActivityNotFoundExceptionimport android.content.ContentValuesimport android.content.Contextimport android.content.Intentimport android.net.Uriimport android.provider.MediaStoreimport androidx.activity.result.ActivityResultCallbackimport androidx.activity.result.ActivityResultLauncherimport androidx.activity.result.contract.ActivityResultContractimport androidx.activity.result.contract.ActivityResultContractssealed class AppNavigator(    private val _action: String,    private val _data: Uri? = null,    private val _package: String? = null) {    class WhatsApp(phone: String) : AppNavigator(        Intent.ACTION_VIEW,        Uri.parse("http://api.whatsapp.com/send?phone=$phone"),        "com.whatsapp"    )    class Telegram(userId: String) : AppNavigator(        Intent.ACTION_VIEW,        Uri.parse("https://telegram.me/$userId"),        "org.telegram.messenger"    )    class Phone(phone: String) : AppNavigator(        Intent.ACTION_DIAL,        Uri.parse("tel:$phone")    )    private fun createIntent() = Intent().apply {        action = _action        data = _data        `package` = _package    }    open fun connect(startActivity: (Intent) -> Unit) {        try {            startActivity(createIntent())        } catch (e: ActivityNotFoundException) {            startActivity(                Intent(                    Intent.ACTION_VIEW,                    Uri.parse("https://play.google.com/store/apps/details?id=$_package")                )            )        }    }}    sealed class ResultAppNavigator<I : Any?, O : Any?, in ARC : ActivityResultContract<I, O>>(        private val contract: ARC,        private val registerForActivityResult:            (ARC, ActivityResultCallback<O>) -> ActivityResultLauncher<I>,        private val registerPermissionForActivityResult:            (ActivityResultContracts.RequestPermission, ActivityResultCallback<Boolean>) -> ActivityResultLauncher<String>,        private val permission: String    ) {        private lateinit var permissionLauncher: ActivityResultLauncher<String>        private lateinit var launcher: ActivityResultLauncher<I>        var input: I? = null        class Camera(            registerForActivityResult:                (ActivityResultContract<Uri, Boolean>, ActivityResultCallback<Boolean>) -> ActivityResultLauncher<Uri>,            registerPermissionForActivityResult:                (ActivityResultContracts.RequestPermission, ActivityResultCallback<Boolean>) -> ActivityResultLauncher<String>        ) : ResultAppNavigator<Uri, Boolean, ActivityResultContracts.TakePicture>(            ActivityResultContracts.TakePicture(),            registerForActivityResult,            registerPermissionForActivityResult,            Manifest.permission.CAMERA        ) {            override fun createInput(context: Context){                input = context.contentResolver.insert(                    MediaStore.Images.Media.EXTERNAL_CONTENT_URI,                    ContentValues()                )            }        }        class Video(            registerForActivityResult:                (ActivityResultContract<Uri?, Boolean?>, ActivityResultCallback<Boolean?>) -> ActivityResultLauncher<Uri?>,            registerPermissionForActivityResult:                (ActivityResultContracts.RequestPermission, ActivityResultCallback<Boolean>) -> ActivityResultLauncher<String>        ) : ResultAppNavigator<Uri?, Boolean?, CustomTakeVideo>(            CustomTakeVideo(),            registerForActivityResult,            registerPermissionForActivityResult,            Manifest.permission.CAMERA        ) {            override fun createInput(context: Context){                input = context.contentResolver.insert(                    MediaStore.Video.Media.EXTERNAL_CONTENT_URI,                    ContentValues()                )            }        }        protected open fun createInput(context: Context) { }        private fun createLauncher(            callBack: ActivityResultCallback<O>        ) {            launcher = registerForActivityResult(contract, callBack)        }        private fun createPermissionLauncher() {            permissionLauncher =                registerPermissionForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->                    when {                        granted -> {                            launcher.launch(input)                        }                        else -> {                            TODO("реализовать нотификацию")                        }                    }                }        }        fun createLaunchers(            context: Context,            callBack: ActivityResultCallback<O>        ){            createInput(context)            createLauncher(callBack)            createPermissionLauncher()        }        fun launch() = permissionLauncher.launch(permission)    }